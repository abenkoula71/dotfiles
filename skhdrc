#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command>
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     "qutebrowser" : echo "hello qutebrowser"
#     "finder"      : false
# ]

# set border color for different modes
:: default @  : chunkc border::color 0xff458588
:: switcher @ : chunkc border::color 0xff98971a
:: swap @     : chunkc border::color 0xffd79921
:: tree @     : chunkc border::color 0xffcc241d
:: space @    : chunkc border::color 0xffebdbb2

# open terminal
cmd + ctrl - return     :   open -na /Applications/iTerm.app;\
                            chunkc tiling::window --toggle float
# toggle between modes
cmd + ctrl - f            ; default
switcher < ctrl - f       ; default
swap     < ctrl - f       ; default
space    < ctrl - f       ; default
tree     < ctrl - f       ; default
swap     < cmd + ctrl - f ; switcher
space    < cmd + ctrl - f ; switcher
tree     < cmd + ctrl - f ; switcher

switcher < escape         ; default
swap     < escape         ; default
space    < escape         ; default
tree     < escape         ; default

switcher < return         ; default
swap     < return         ; default
space    < return         ; default
tree     < return         ; default

switcher < a              ; swap
switcher < s              ; space
switcher < t              ; tree

# select windows
switcher < h              : chunkc tiling::window --focus west
switcher < l              : chunkc tiling::window --focus east
switcher < j              : chunkc tiling::window --focus south
switcher < k              : chunkc tiling::window --focus north
switcher < m              : chunkc tiling::window --focus prev
switcher < n              : chunkc tiling::window --focus next

# close window
switcher < w              : chunkc tiling::window --close ; default

# move window to desktop
switcher < shift - 1      : chunkc tiling::window --send-to-desktop 1
switcher < shift - 2      : chunkc tiling::window --send-to-desktop 2
switcher < shift - 3      : chunkc tiling::window --send-to-desktop 3
switcher < shift - 4      : chunkc tiling::window --send-to-desktop 4
switcher < shift - 5      : chunkc tiling::window --send-to-desktop 5

# swap mode
# swap window position
swap    < h               : chunkc tiling::window --swap west
swap    < j               : chunkc tiling::window --swap south
swap    < k               : chunkc tiling::window --swap north
swap    < l               : chunkc tiling::window --swap east

# move window
swap    < shift - k       : chunkc tiling::window --warp north
swap    < shift - l       : chunkc tiling::window --warp east
swap    < shift - j       : chunkc tiling::window --warp south
swap    < shift - h       : chunkc tiling::window --warp west

# focus monitor
swap    < z               : chunkc tiling::monitor -f prev
swap    < c               : chunkc tiling::monitor -f next

# mirror tree y-axis
swap    < y               : chunkc tiling::desktop --mirror vertical

# mirror tree x-axis
swap    < x               : chunkc tiling::desktop --mirror horizontal

# space mode
space   < a               : chunkc tiling::desktop --layout bsp
space   < s               : chunkc tiling::desktop --layout monocle
space   < d               : chunkc tiling::desktop --layout float

# toggle desktop offset
space   < o               : chunkc tiling::desktop --toggle offset

# adjust desktop padding
space   < p               : chunkc tiling::desktop --padding inc
space   < shift - p       : chunkc tiling::desktop --padding dec

# adjust gap
space   < g               : chunkc tiling::desktop --gap inc
space   < shift - g       : chunkc tiling::desktop --gap dec

# tree mode
tree    < f               : chunkc tiling::window --toggle fullscreen
tree    < shift - f       : chunkc tiling::window --toggle native-fullscreen
tree    < d               : chunkc tiling::window --toggle parent
tree    < w               : chunkc tiling::window --toggle float

# resize folating window 
tree    < c               : chunkc tiling::window --grid-layout 4:4:1:1:2:2
tree    < shift - c       : chunkc tiling::window --grid-layout 1:1:0:0:1:1
tree    < up              : chunkc tiling::window --grid-layout 2:1:0:0:2:1
tree    < down            : chunkc tiling::window --grid-layout 2:1:0:1:2:1
tree    < left            : chunkc tiling::window --grid-layout 1:2:0:0:1:1
tree    < right           : chunkc tiling::window --grid-layout 1:2:1:0:1:1

# move floating windows / windows on a grid space
# 10 rows 10 cols grid, windows left and top on 0 grid, and have 5 grid width 5 grid height
tree    < q               : chunkc tiling::window --grid-layout 10:10:0:0:5:5

tree    < r               : chunkc tiling::desktop --rotate 90
tree    < s               : chunkc tiling::window --toggle split

# adjust window size
tree    < e               : chunkc tiling::desktop --equalize
tree    < h               : chunkc tiling::window --use-temporary-ratio 0.05 --adjust-window-edge west; chunkc tiling::window --use-temporary-ratio -0.05 --adjust-window-edge east
tree    < j               : chunkc tiling::window --use-temporary-ratio 0.05 --adjust-window-edge south; chunkc tiling::window --use-temporary-ratio -0.05 --adjust-window-edge north
tree    < k               : chunkc tiling::window --use-temporary-ratio 0.05 --adjust-window-edge north; chunkc tiling::window --use-temporary-ratio -0.05 --adjust-window-edge south
tree    < l               : chunkc tiling::window --use-temporary-ratio 0.05 --adjust-window-edge east; chunkc tiling::window --use-temporary-ratio -0.05 --adjust-window-edge west

