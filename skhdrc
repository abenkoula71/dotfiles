#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command>
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     "qutebrowser" : echo "hello qutebrowser"
#     "finder"      : false
# ]
# open terminal
# cmd - return : /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d ~

# modes 
:: default : yabai -m config window_border off
:: switcher : yabai -m config window_border on && \
              yabai -m config normal_window_border_color 0xff458588 && \
              yabai -m config active_window_border_color 0xff98971a

cmd + ctrl - a ; switcher

switcher < return ; default
switcher < escape ; default

# focus window
switcher < h : yabai -m window --focus west
switcher < j : yabai -m window --focus south
switcher < k : yabai -m window --focus north
switcher < l : yabai -m window --focus east
switcher < n : yabai -m window --focus next
switcher < shift - n : yabai -m window --focus prev

# swap window
switcher < shift - h : yabai -m window --swap west
switcher < shift - j : yabai -m window --swap south
switcher < shift - k : yabai -m window --swap north
switcher < shift - l : yabai -m window --swap east

# move window
switcher < cmd - h : yabai -m window --warp west
switcher < cmd - j : yabai -m window --warp south
switcher < cmd - k : yabai -m window --warp north
switcher < cmd - l : yabai -m window --warp east

# move window
switcher < left : yabai -m window --move rel:-20:0
switcher < down : yabai -m window --move rel:0:20
switcher < up : yabai -m window --move rel:0:-20
switcher < right : yabai -m window --move rel:20:0

# increase window size
switcher < a : yabai -m window --resize left:-20:0
switcher < s : yabai -m window --resize bottom:0:20
switcher < w : yabai -m window --resize top:0:-20
switcher < d : yabai -m window --resize right:20:0

# decrease window size
switcher < shift - a : yabai -m window --resize left:20:0
switcher < shift - s : yabai -m window --resize bottom:0:-20
switcher < shift - w : yabai -m window --resize top:0:20
switcher < shift - d : yabai -m window --resize right:-20:0

# set insertion point in focused container
switcher < alt - h : yabai -m window --insert west;\
                     yabai -m config insert_window_border_color 0xffcc241d
switcher < alt - j : yabai -m window --insert south;\
                     yabai -m config insert_window_border_color 0xffcc241d
switcher < alt - k : yabai -m window --insert north;\
                     yabai -m config insert_window_border_color 0xffcc241d
switcher < alt - l : yabai -m window --insert east;\
                     yabai -m config insert_window_border_color 0xffcc241d
# balance size of windows
switcher < 0 : yabai -m space --balance

# make floating window fill screen
cmd + shift - up     : yabai -m window --grid 1:1:0:0:1:1
switcher < shift - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
cmd + shift - left   : yabai -m window --grid 1:2:0:0:1:1
switcher < shift - left   : yabai -m window --grid 1:2:0:0:1:1

# make floating window fill right-half of screen
cmd + shift - right  : yabai -m window --grid 1:2:1:0:1:1
switcher < shift - right  : yabai -m window --grid 1:2:1:0:1:1

# rotate tree
cmd + shift - r : yabai -m space --rotate 90
switcher < r : yabai -m space --rotate 90

# mirror tree y-axis
cmd + shift - y : yabai -m space --mirror y-axis
switcher < y : yabai -m space --mirror y-axis

# mirror tree x-axis
cmd + shift - x : yabai -m space --mirror x-axis
switcher < x : yabai -m space --mirror x-axis

# toggle desktop offset
switcher < o : yabai -m space --toggle padding; yabai -m space --toggle gap

# adjust desktop padding
switcher < p               : yabai -m space --padding rel:-10:-10:-10:-10
switcher < shift - p       : yabai -m space --padding rel:10:10:10:10

# adjust gap
switcher < g               : yabai -m space --gap rel:-10
switcher < shift - g       : yabai -m space --gap rel:10

# toggle window parent zoom
cmd + shift - d : yabai -m window --toggle zoom-parent
switcher < z : yabai -m window --toggle zoom-parent

# toggle window fullscreen zoom
cmd + shift - f : yabai -m window --toggle zoom-fullscreen
switcher < f : yabai -m window --toggle zoom-fullscreen

# toggle window native fullscreen
cmd + shift + alt - f : yabai -m window --toggle native-fullscreen
switcher < shift - f : yabai -m window --toggle native-fullscreen

# toggle window border
switcher < alt + b : yabai -m window --toggle border

# toggle window split type
cmd + shift - e : yabai -m window --toggle split
switcher < e : yabai -m window --toggle split

# float / unfloat window and center on screen
cmd + shift - t : yabai -m window --toggle float;\
                  yabai -m window --grid 4:4:1:1:2:2
switcher < t : yabai -m window --toggle float;\
                  yabai -m window --grid 4:4:1:1:2:2

# change layout of desktop
swithcer < b : yabai -m space --layout bsp
swithcer < shift + b : yabai -m space --layout float

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# cmd + shift - n : yabai -m space --create && \
#                   index="$(yabai -m query --displays --display | jq '.spaces[-1]')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# create desktop and follow focus - uses jq for parsing json (brew install jq)
# cmd + alt - n : yabai -m space --create;\
#                   index="$(yabai -m query --displays --display | jq '.spaces[-1]')" && \
#                   yabai -m space --focus "${index}"

# destroy desktop
# cmd + shift - w : yabai -m space --destroy
# toggle sticky
# cmd + shift - s : yabai -m window --toggle sticky

# toggle sticky, float and resize to picture-in-picture size
# cmd + shift - p : yabai -m window --toggle sticky;\
#                   yabai -m window --grid 5:5:4:0:1:1

# fast focus desktop
# cmd + alt - r : yabai -m space --focus recent
# cmd + alt - p : yabai -m space --focus prev
# cmd + alt - n : yabai -m space --focus next
# cmd + alt - 1 : yabai -m space --focus 1
# cmd + alt - 2 : yabai -m space --focus 2
# cmd + alt - 3 : yabai -m space --focus 3
# cmd + alt - 4 : yabai -m space --focus 4
# cmd + alt - 5 : yabai -m space --focus 5
# cmd + alt - 6 : yabai -m space --focus 6
# cmd + alt - 7 : yabai -m space --focus 7
# cmd + alt - 8 : yabai -m space --focus 8
# cmd + alt - 9 : yabai -m space --focus 9
# cmd + alt - 0 : yabai -m space --focus 10

# send window to desktop and follow focus
# shift + cmd - x : yabai -m window --space recent; yabai -m space --focus recent
# shift + cmd - z : yabai -m window --space prev; yabai -m space --focus prev
# shift + cmd - c : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 1 : yabai -m window --space  1; yabai -m space --focus 1
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2
# shift + cmd - 3 : yabai -m window --space  3; yabai -m space --focus 3
# shift + cmd - 4 : yabai -m window --space  4; yabai -m space --focus 4
# shift + cmd - 5 : yabai -m window --space  5; yabai -m space --focus 5
# shift + cmd - 6 : yabai -m window --space  6; yabai -m space --focus 6
# shift + cmd - 7 : yabai -m window --space  7; yabai -m space --focus 7
# shift + cmd - 8 : yabai -m window --space  8; yabai -m space --focus 8
# shift + cmd - 9 : yabai -m window --space  9; yabai -m space --focus 9
# shift + cmd - 0 : yabai -m window --space 10; yabai -m space --focus 10

# focus monitor
# ctrl + alt - x  : yabai -m display --focus recent
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - c  : yabai -m display --focus next
# ctrl + alt - 1  : yabai -m display --focus 1
# ctrl + alt - 2  : yabai -m display --focus 2
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - x  : yabai -m window --display recent; yabai -m display --focus recent
# ctrl + cmd - z  : yabai -m window --display prev; yabai -m display --focus prev
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1
# ctrl + cmd - 2  : yabai -m window --display 2; yabai -m display --focus 2
# ctrl + cmd - 3  : yabai -m window --display 3; yabai -m display --focus 3
