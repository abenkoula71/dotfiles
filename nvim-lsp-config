
" LSP {{{
lua << EOF
require'lspconfig'.pyright.setup{}
require'lspconfig'.bashls.setup{}
require'lspconfig'.ccls.setup{
    initializationOptions = {
        clang = {
            resourceDir = "";
            extraArgs = {};
        };
    };
}
require'lspconfig'.texlab.setup{
    settings = {
        latex = {
            forwardSearch = {
                executable = "/Applications/Skim.app/Contents/SharedSupport/displayline";
                args = {"%l", "%p", "%f"};
            }
        } 
    }
}
require'lspconfig'.vimls.setup{}

vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
  vim.lsp.diagnostic.on_publish_diagnostics, {
    virtual_text = true,
    signs = true,
    update_in_insert = false,
  }
)

vim.api.nvim_exec([[
augroup lsp_diagnostic
  autocmd! * <buffer>
  " autocmd CursorHold * lua vim.lsp.diagnostic.show_line_diagnostics()
  autocmd CursorHoldI * silent! lua vim.lsp.buf.signature_help()
augroup END
]], false)

vim.fn.sign_define('LspDiagnosticsSignError', { text = "", texthl = "LspDiagnosticsDefaultError" })
vim.fn.sign_define('LspDiagnosticsSignWarning', { text = "", texthl = "LspDiagnosticsDefaultWarning" })
vim.fn.sign_define('LspDiagnosticsSignInformation', { text = "", texthl = "LspDiagnosticsDefaultInformation" })
vim.fn.sign_define('LspDiagnosticsSignHint', { text = "", texthl = "LspDiagnosticsDefaultHint" })
EOF
" }}}

" Mappings {{{

lua << EOF
local nvim_lsp = require('lspconfig')
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  local opts = { noremap=true, silent=true }
--   buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
--   buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
--   buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
--   buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
--   buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
--   buf_set_keymap('n', '<leader>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
--   buf_set_keymap('n', '<leader>r', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
--   buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
--   buf_set_keymap('n', '<leader>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
--   buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
--   buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
-- 
  if client.resolved_capabilities.document_formatting then
    buf_set_keymap("n", "<leader>gq", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
  elseif client.resolved_capabilities.document_range_formatting then
    buf_set_keymap("n", "<leader>gq", "<cmd>lua vim.lsp.buf.range_formatting()<CR>", opts)
  end

  if client.resolved_capabilities.document_highlight then
    vim.api.nvim_exec([[
      hi LspReferenceRead gui=underline guisp=blue 
      hi LspReferenceText gui=underline guisp=blue
      hi LspReferenceWrite gui=underline guisp=blue
      augroup lsp_document_highlight
        autocmd! * <buffer>
        autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
        autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
      augroup END
    ]], false)
  end
end

local servers = { "pyright", "ccls", "texlab", "bashls" }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup { capabilities = capabilities, on_attach = on_attach}
end

-- compltion
require'compe'.setup {
  enabled = true;
  autocomplete = true;
  debug = false;
  min_length = 1;
  preselect = 'enable';
  throttle_time = 80;
  source_timeout = 200;
  incomplete_delay = 400;
  max_abbr_width = 100;
  max_kind_width = 100;
  max_menu_width = 100;
  documentation = true;

  source = {
    path = true;
    buffer = true;
    calc = false;
    nvim_lsp = true;
    nvim_lua = false;
    ultisnips = true;
  };
}

local saga = require 'lspsaga'
saga.init_lsp_saga {
-- add your config value here
-- default value
use_saga_diagnostic_sign = false;
-- error_sign = '',
-- warn_sign = '',
-- hint_sign = '',
-- infor_sign = '',
-- dianostic_header_icon = '   ',
-- code_action_icon = ' ',
-- code_action_prompt = {
--   enable = true,
--   sign = true,
--   sign_priority = 20,
--   virtual_text = true,
-- },
-- finder_definition_icon = '  ',
-- finder_reference_icon = '  ',
-- max_preview_lines = 10, -- preview lines of lsp_finder and definition preview
finder_action_keys = {
  open = 'o',
  vsplit = 's',
  split = 'i',
  quit = {'q', '<esc>'},
  scroll_down = '<C-f>',
  scroll_up = '<C-b>'
 };
 code_action_keys = {
   quit = {'q', '<esc>'},
   exec = '<CR>'
 };
 rename_action_keys = {
   quit = {'q', '<esc>'},
   exec = '<CR>'  -- quit can be a table
 };
-- definition_preview_icon = '  '
-- 1: thin border | 2: rounded border | 3: thick border | 4: ascii border
-- border_style = 1
-- rename_prompt_prefix = '➤',
-- if you don't use nvim-lspconfig you must pass your server name and
-- the related filetypes into this table
-- like server_filetype_map = {metals = {'sbt', 'scala'}}
-- server_filetype_map = {}
}
EOF

inoremap <silent><expr><C-Space> compe#complete()
inoremap <silent><expr><CR>      compe#confirm({ 'keys': "\<Plug>delimitMateCR", 'mode': '' })
inoremap <silent><expr><C-e>     compe#close('<C-e>')
inoremap <silent><expr><C-f>     compe#scroll({ 'delta': +4 })
inoremap <silent><expr><C-b>     compe#scroll({ 'delta': -4 })

nnoremap <silent><leader>lcf :Lspsaga lsp_finder<CR>
nnoremap <silent><leader>lca :Lspsaga code_action<CR>
vnoremap <silent><leader>lca :<C-U>Lspsaga range_code_action<CR>
nnoremap <silent> K :Lspsaga hover_doc<CR>
nnoremap <silent> <C-f> <cmd>lua require('lspsaga.action').smart_scroll_with_saga(1)<CR>
nnoremap <silent> <C-b> <cmd>lua require('lspsaga.action').smart_scroll_with_saga(-1)<CR>
nnoremap <silent><leader>lcs :Lspsaga signature_help<CR>
nnoremap <silent><leader>lcr :Lspsaga rename<CR>
nnoremap <silent><leader>lcd :Lspsaga preview_definition<CR>
nnoremap <silent><leader>cD :Lspsaga show_line_diagnostics<CR>
nnoremap <silent><leader>cd <cmd>lua require'lspsaga.diagnostic'.show_cursor_diagnostics()<CR>
nnoremap <silent> [e :Lspsaga diagnostic_jump_next<CR>
nnoremap <silent> ]e :Lspsaga diagnostic_jump_prev<CR>


"}}}

" vim: ts=2 sw=2 fdm=marker ft=vim
